// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package publisher

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NarratorNFTsMetaData contains all meta data concerning the NarratorNFTs contract.
var NarratorNFTsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"URIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600c81526020017f4e61727261746f724e46547300000000000000000000000000000000000000008152506040518060400160405280600281526020017f414e000000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000168565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b600060028204905060018216806200018157607f821691505b602082108114156200019857620001976200019e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b612fa580620001dd6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063b88d4fde11610071578063b88d4fde14610340578063c87b56dd1461035c578063d0def5211461038c578063e7657e15146103a8578063e985e9c5146103c657610121565b80636352211e1461027657806370a08231146102a6578063953f97aa146102d657806395d89b4114610306578063a22cb4651461032457610121565b806318160ddd116100f457806318160ddd146101c057806323b872dd146101de5780632f745c59146101fa57806342842e0e1461022a5780634f6ccce71461024657610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190612146565b6103f6565b60405161014d919061251a565b60405180910390f35b61015e610470565b60405161016b9190612535565b60405180910390f35b61018e60048036038101906101899190612198565b610502565b60405161019b91906124b3565b60405180910390f35b6101be60048036038101906101b9919061210a565b610587565b005b6101c861069f565b6040516101d59190612777565b60405180910390f35b6101f860048036038101906101f39190611fb0565b6106ac565b005b610214600480360381019061020f919061210a565b61070c565b6040516102219190612777565b60405180910390f35b610244600480360381019061023f9190611fb0565b6107b1565b005b610260600480360381019061025b9190612198565b6107d1565b60405161026d9190612777565b60405180910390f35b610290600480360381019061028b9190612198565b610868565b60405161029d91906124b3565b60405180910390f35b6102c060048036038101906102bb9190611f4b565b61091a565b6040516102cd9190612777565b60405180910390f35b6102f060048036038101906102eb9190612198565b6109d2565b6040516102fd9190612535565b60405180910390f35b61030e610a72565b60405161031b9190612535565b60405180910390f35b61033e6004803603810190610339919061207a565b610b04565b005b61035a60048036038101906103559190611fff565b610c85565b005b61037660048036038101906103719190612198565b610ce7565b6040516103839190612535565b60405180910390f35b6103a660048036038101906103a191906120b6565b610dd4565b005b6103b0610e93565b6040516103bd9190612777565b60405180910390f35b6103e060048036038101906103db9190611f74565b610e9f565b6040516103ed919061251a565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610469575061046882610f33565b5b9050919050565b60606000805461047f90612991565b80601f01602080910402602001604051908101604052809291908181526020018280546104ab90612991565b80156104f85780601f106104cd576101008083540402835291602001916104f8565b820191906000526020600020905b8154815290600101906020018083116104db57829003601f168201915b5050505050905090565b600061050d82611015565b61054c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610543906126d7565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061059282610868565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fa90612717565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610622611081565b73ffffffffffffffffffffffffffffffffffffffff16148061065157506106508161064b611081565b610e9f565b5b610690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068790612637565b60405180910390fd5b61069a8383611089565b505050565b6000600880549050905090565b6106bd6106b7611081565b82611142565b6106fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f390612737565b60405180910390fd5b610707838383611220565b505050565b60006107178361091a565b8210610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f90612557565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6107cc83838360405180602001604052806000815250610c85565b505050565b60006107db61069f565b821061081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081390612757565b60405180910390fd5b60088281548110610856577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090890612697565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098290612677565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b60205280600052604060002060009150905080546109f190612991565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1d90612991565b8015610a6a5780601f10610a3f57610100808354040283529160200191610a6a565b820191906000526020600020905b815481529060010190602001808311610a4d57829003601f168201915b505050505081565b606060018054610a8190612991565b80601f0160208091040260200160405190810160405280929190818152602001828054610aad90612991565b8015610afa5780601f10610acf57610100808354040283529160200191610afa565b820191906000526020600020905b815481529060010190602001808311610add57829003601f168201915b5050505050905090565b610b0c611081565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b71906125d7565b60405180910390fd5b8060056000610b87611081565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610c34611081565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610c79919061251a565b60405180910390a35050565b610c96610c90611081565b83611142565b610cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccc90612737565b60405180910390fd5b610ce18484848461147c565b50505050565b6060610cf282611015565b610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890612657565b60405180910390fd5b600b60008381526020019081526020016000208054610d4f90612991565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7b90612991565b8015610dc85780601f10610d9d57610100808354040283529160200191610dc8565b820191906000526020600020905b815481529060010190602001808311610dab57829003601f168201915b50505050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b906125f7565b60405180910390fd5b6000610e50600a6114d8565b905081600b60008381526020019081526020016000209080519060200190610e79929190611d6f565b50610e8483826114e6565b610e8e600a6116b4565b505050565b600a8060000154905081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ffe57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061100e575061100d826116ca565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166110fc83610868565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061114d82611015565b61118c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118390612617565b60405180910390fd5b600061119783610868565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061120657508373ffffffffffffffffffffffffffffffffffffffff166111ee84610502565b73ffffffffffffffffffffffffffffffffffffffff16145b8061121757506112168185610e9f565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661124082610868565b73ffffffffffffffffffffffffffffffffffffffff1614611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d906126f7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fd906125b7565b60405180910390fd5b611311838383611734565b61131c600082611089565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461136c91906128a7565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113c39190612851565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611487848484611220565b61149384848484611848565b6114d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c990612577565b60405180910390fd5b50505050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154d906126b7565b60405180910390fd5b61155f81611015565b1561159f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159690612597565b60405180910390fd5b6115ab60008383611734565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115fb9190612851565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6001816000016000828254019250508190555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61173f8383836119df565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117825761177d816119e4565b6117c1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146117c0576117bf8382611a2d565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611804576117ff81611b9a565b611843565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611842576118418282611cdd565b5b5b505050565b60006118698473ffffffffffffffffffffffffffffffffffffffff16611d5c565b156119d2578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611892611081565b8786866040518563ffffffff1660e01b81526004016118b494939291906124ce565b602060405180830381600087803b1580156118ce57600080fd5b505af19250505080156118ff57506040513d601f19601f820116820180604052508101906118fc919061216f565b60015b611982573d806000811461192f576040519150601f19603f3d011682016040523d82523d6000602084013e611934565b606091505b5060008151141561197a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197190612577565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119d7565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001611a3a8461091a565b611a4491906128a7565b9050600060076000848152602001908152602001600020549050818114611b29576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050611bae91906128a7565b9050600060096000848152602001908152602001600020549050600060088381548110611c04577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110611c4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480611cc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000611ce88361091a565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080823b905060008111915050919050565b828054611d7b90612991565b90600052602060002090601f016020900481019282611d9d5760008555611de4565b82601f10611db657805160ff1916838001178555611de4565b82800160010185558215611de4579182015b82811115611de3578251825591602001919060010190611dc8565b5b509050611df19190611df5565b5090565b5b80821115611e0e576000816000905550600101611df6565b5090565b6000611e25611e20846127b7565b612792565b905082815260208101848484011115611e3d57600080fd5b611e4884828561294f565b509392505050565b6000611e63611e5e846127e8565b612792565b905082815260208101848484011115611e7b57600080fd5b611e8684828561294f565b509392505050565b600081359050611e9d81612f13565b92915050565b600081359050611eb281612f2a565b92915050565b600081359050611ec781612f41565b92915050565b600081519050611edc81612f41565b92915050565b600082601f830112611ef357600080fd5b8135611f03848260208601611e12565b91505092915050565b600082601f830112611f1d57600080fd5b8135611f2d848260208601611e50565b91505092915050565b600081359050611f4581612f58565b92915050565b600060208284031215611f5d57600080fd5b6000611f6b84828501611e8e565b91505092915050565b60008060408385031215611f8757600080fd5b6000611f9585828601611e8e565b9250506020611fa685828601611e8e565b9150509250929050565b600080600060608486031215611fc557600080fd5b6000611fd386828701611e8e565b9350506020611fe486828701611e8e565b9250506040611ff586828701611f36565b9150509250925092565b6000806000806080858703121561201557600080fd5b600061202387828801611e8e565b945050602061203487828801611e8e565b935050604061204587828801611f36565b925050606085013567ffffffffffffffff81111561206257600080fd5b61206e87828801611ee2565b91505092959194509250565b6000806040838503121561208d57600080fd5b600061209b85828601611e8e565b92505060206120ac85828601611ea3565b9150509250929050565b600080604083850312156120c957600080fd5b60006120d785828601611e8e565b925050602083013567ffffffffffffffff8111156120f457600080fd5b61210085828601611f0c565b9150509250929050565b6000806040838503121561211d57600080fd5b600061212b85828601611e8e565b925050602061213c85828601611f36565b9150509250929050565b60006020828403121561215857600080fd5b600061216684828501611eb8565b91505092915050565b60006020828403121561218157600080fd5b600061218f84828501611ecd565b91505092915050565b6000602082840312156121aa57600080fd5b60006121b884828501611f36565b91505092915050565b6121ca816128db565b82525050565b6121d9816128ed565b82525050565b60006121ea82612819565b6121f4818561282f565b935061220481856020860161295e565b61220d81612a81565b840191505092915050565b600061222382612824565b61222d8185612840565b935061223d81856020860161295e565b61224681612a81565b840191505092915050565b600061225e602b83612840565b915061226982612a92565b604082019050919050565b6000612281603283612840565b915061228c82612ae1565b604082019050919050565b60006122a4601c83612840565b91506122af82612b30565b602082019050919050565b60006122c7602483612840565b91506122d282612b59565b604082019050919050565b60006122ea601983612840565b91506122f582612ba8565b602082019050919050565b600061230d601183612840565b915061231882612bd1565b602082019050919050565b6000612330602c83612840565b915061233b82612bfa565b604082019050919050565b6000612353603883612840565b915061235e82612c49565b604082019050919050565b6000612376601183612840565b915061238182612c98565b602082019050919050565b6000612399602a83612840565b91506123a482612cc1565b604082019050919050565b60006123bc602983612840565b91506123c782612d10565b604082019050919050565b60006123df602083612840565b91506123ea82612d5f565b602082019050919050565b6000612402602c83612840565b915061240d82612d88565b604082019050919050565b6000612425602983612840565b915061243082612dd7565b604082019050919050565b6000612448602183612840565b915061245382612e26565b604082019050919050565b600061246b603183612840565b915061247682612e75565b604082019050919050565b600061248e602c83612840565b915061249982612ec4565b604082019050919050565b6124ad81612945565b82525050565b60006020820190506124c860008301846121c1565b92915050565b60006080820190506124e360008301876121c1565b6124f060208301866121c1565b6124fd60408301856124a4565b818103606083015261250f81846121df565b905095945050505050565b600060208201905061252f60008301846121d0565b92915050565b6000602082019050818103600083015261254f8184612218565b905092915050565b6000602082019050818103600083015261257081612251565b9050919050565b6000602082019050818103600083015261259081612274565b9050919050565b600060208201905081810360008301526125b081612297565b9050919050565b600060208201905081810360008301526125d0816122ba565b9050919050565b600060208201905081810360008301526125f0816122dd565b9050919050565b6000602082019050818103600083015261261081612300565b9050919050565b6000602082019050818103600083015261263081612323565b9050919050565b6000602082019050818103600083015261265081612346565b9050919050565b6000602082019050818103600083015261267081612369565b9050919050565b600060208201905081810360008301526126908161238c565b9050919050565b600060208201905081810360008301526126b0816123af565b9050919050565b600060208201905081810360008301526126d0816123d2565b9050919050565b600060208201905081810360008301526126f0816123f5565b9050919050565b6000602082019050818103600083015261271081612418565b9050919050565b600060208201905081810360008301526127308161243b565b9050919050565b600060208201905081810360008301526127508161245e565b9050919050565b6000602082019050818103600083015261277081612481565b9050919050565b600060208201905061278c60008301846124a4565b92915050565b600061279c6127ad565b90506127a882826129c3565b919050565b6000604051905090565b600067ffffffffffffffff8211156127d2576127d1612a52565b5b6127db82612a81565b9050602081019050919050565b600067ffffffffffffffff82111561280357612802612a52565b5b61280c82612a81565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061285c82612945565b915061286783612945565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561289c5761289b6129f4565b5b828201905092915050565b60006128b282612945565b91506128bd83612945565b9250828210156128d0576128cf6129f4565b5b828203905092915050565b60006128e682612925565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561297c578082015181840152602081019050612961565b8381111561298b576000848401525b50505050565b600060028204905060018216806129a957607f821691505b602082108114156129bd576129bc612a23565b5b50919050565b6129cc82612a81565b810181811067ffffffffffffffff821117156129eb576129ea612a52565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f5a65726f2060746f602061646472657373000000000000000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f494420646f6573206e6f74206578697374000000000000000000000000000000600082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b612f1c816128db565b8114612f2757600080fd5b50565b612f33816128ed565b8114612f3e57600080fd5b50565b612f4a816128f9565b8114612f5557600080fd5b50565b612f6181612945565b8114612f6c57600080fd5b5056fea26469706673582212205b123469c16551b5ad5892e8392d19b148ea01035a0554b33e2d4b21e293bc5064736f6c63430008040033",
}

// NarratorNFTsABI is the input ABI used to generate the binding from.
// Deprecated: Use NarratorNFTsMetaData.ABI instead.
var NarratorNFTsABI = NarratorNFTsMetaData.ABI

// NarratorNFTsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NarratorNFTsMetaData.Bin instead.
var NarratorNFTsBin = NarratorNFTsMetaData.Bin

// DeployNarratorNFTs deploys a new Ethereum contract, binding an instance of NarratorNFTs to it.
func DeployNarratorNFTs(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NarratorNFTs, error) {
	parsed, err := NarratorNFTsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NarratorNFTsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NarratorNFTs{NarratorNFTsCaller: NarratorNFTsCaller{contract: contract}, NarratorNFTsTransactor: NarratorNFTsTransactor{contract: contract}, NarratorNFTsFilterer: NarratorNFTsFilterer{contract: contract}}, nil
}

// NarratorNFTs is an auto generated Go binding around an Ethereum contract.
type NarratorNFTs struct {
	NarratorNFTsCaller     // Read-only binding to the contract
	NarratorNFTsTransactor // Write-only binding to the contract
	NarratorNFTsFilterer   // Log filterer for contract events
}

// NarratorNFTsCaller is an auto generated read-only Go binding around an Ethereum contract.
type NarratorNFTsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NarratorNFTsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NarratorNFTsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NarratorNFTsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NarratorNFTsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NarratorNFTsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NarratorNFTsSession struct {
	Contract     *NarratorNFTs     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NarratorNFTsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NarratorNFTsCallerSession struct {
	Contract *NarratorNFTsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// NarratorNFTsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NarratorNFTsTransactorSession struct {
	Contract     *NarratorNFTsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// NarratorNFTsRaw is an auto generated low-level Go binding around an Ethereum contract.
type NarratorNFTsRaw struct {
	Contract *NarratorNFTs // Generic contract binding to access the raw methods on
}

// NarratorNFTsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NarratorNFTsCallerRaw struct {
	Contract *NarratorNFTsCaller // Generic read-only contract binding to access the raw methods on
}

// NarratorNFTsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NarratorNFTsTransactorRaw struct {
	Contract *NarratorNFTsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNarratorNFTs creates a new instance of NarratorNFTs, bound to a specific deployed contract.
func NewNarratorNFTs(address common.Address, backend bind.ContractBackend) (*NarratorNFTs, error) {
	contract, err := bindNarratorNFTs(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NarratorNFTs{NarratorNFTsCaller: NarratorNFTsCaller{contract: contract}, NarratorNFTsTransactor: NarratorNFTsTransactor{contract: contract}, NarratorNFTsFilterer: NarratorNFTsFilterer{contract: contract}}, nil
}

// NewNarratorNFTsCaller creates a new read-only instance of NarratorNFTs, bound to a specific deployed contract.
func NewNarratorNFTsCaller(address common.Address, caller bind.ContractCaller) (*NarratorNFTsCaller, error) {
	contract, err := bindNarratorNFTs(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NarratorNFTsCaller{contract: contract}, nil
}

// NewNarratorNFTsTransactor creates a new write-only instance of NarratorNFTs, bound to a specific deployed contract.
func NewNarratorNFTsTransactor(address common.Address, transactor bind.ContractTransactor) (*NarratorNFTsTransactor, error) {
	contract, err := bindNarratorNFTs(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NarratorNFTsTransactor{contract: contract}, nil
}

// NewNarratorNFTsFilterer creates a new log filterer instance of NarratorNFTs, bound to a specific deployed contract.
func NewNarratorNFTsFilterer(address common.Address, filterer bind.ContractFilterer) (*NarratorNFTsFilterer, error) {
	contract, err := bindNarratorNFTs(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NarratorNFTsFilterer{contract: contract}, nil
}

// bindNarratorNFTs binds a generic wrapper to an already deployed contract.
func bindNarratorNFTs(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NarratorNFTsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NarratorNFTs *NarratorNFTsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NarratorNFTs.Contract.NarratorNFTsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NarratorNFTs *NarratorNFTsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.NarratorNFTsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NarratorNFTs *NarratorNFTsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.NarratorNFTsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NarratorNFTs *NarratorNFTsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NarratorNFTs.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NarratorNFTs *NarratorNFTsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NarratorNFTs *NarratorNFTsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.contract.Transact(opts, method, params...)
}

// URIs is a free data retrieval call binding the contract method 0x953f97aa.
//
// Solidity: function URIs(uint256 ) view returns(string)
func (_NarratorNFTs *NarratorNFTsCaller) URIs(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "URIs", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// URIs is a free data retrieval call binding the contract method 0x953f97aa.
//
// Solidity: function URIs(uint256 ) view returns(string)
func (_NarratorNFTs *NarratorNFTsSession) URIs(arg0 *big.Int) (string, error) {
	return _NarratorNFTs.Contract.URIs(&_NarratorNFTs.CallOpts, arg0)
}

// URIs is a free data retrieval call binding the contract method 0x953f97aa.
//
// Solidity: function URIs(uint256 ) view returns(string)
func (_NarratorNFTs *NarratorNFTsCallerSession) URIs(arg0 *big.Int) (string, error) {
	return _NarratorNFTs.Contract.URIs(&_NarratorNFTs.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _NarratorNFTs.Contract.BalanceOf(&_NarratorNFTs.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _NarratorNFTs.Contract.BalanceOf(&_NarratorNFTs.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NarratorNFTs *NarratorNFTsCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NarratorNFTs *NarratorNFTsSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _NarratorNFTs.Contract.GetApproved(&_NarratorNFTs.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NarratorNFTs *NarratorNFTsCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _NarratorNFTs.Contract.GetApproved(&_NarratorNFTs.CallOpts, tokenId)
}

// Ids is a free data retrieval call binding the contract method 0xe7657e15.
//
// Solidity: function ids() view returns(uint256 _value)
func (_NarratorNFTs *NarratorNFTsCaller) Ids(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "ids")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Ids is a free data retrieval call binding the contract method 0xe7657e15.
//
// Solidity: function ids() view returns(uint256 _value)
func (_NarratorNFTs *NarratorNFTsSession) Ids() (*big.Int, error) {
	return _NarratorNFTs.Contract.Ids(&_NarratorNFTs.CallOpts)
}

// Ids is a free data retrieval call binding the contract method 0xe7657e15.
//
// Solidity: function ids() view returns(uint256 _value)
func (_NarratorNFTs *NarratorNFTsCallerSession) Ids() (*big.Int, error) {
	return _NarratorNFTs.Contract.Ids(&_NarratorNFTs.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NarratorNFTs *NarratorNFTsCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NarratorNFTs *NarratorNFTsSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _NarratorNFTs.Contract.IsApprovedForAll(&_NarratorNFTs.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NarratorNFTs *NarratorNFTsCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _NarratorNFTs.Contract.IsApprovedForAll(&_NarratorNFTs.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NarratorNFTs *NarratorNFTsCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NarratorNFTs *NarratorNFTsSession) Name() (string, error) {
	return _NarratorNFTs.Contract.Name(&_NarratorNFTs.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NarratorNFTs *NarratorNFTsCallerSession) Name() (string, error) {
	return _NarratorNFTs.Contract.Name(&_NarratorNFTs.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NarratorNFTs *NarratorNFTsCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NarratorNFTs *NarratorNFTsSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _NarratorNFTs.Contract.OwnerOf(&_NarratorNFTs.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NarratorNFTs *NarratorNFTsCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _NarratorNFTs.Contract.OwnerOf(&_NarratorNFTs.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NarratorNFTs *NarratorNFTsCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NarratorNFTs *NarratorNFTsSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _NarratorNFTs.Contract.SupportsInterface(&_NarratorNFTs.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NarratorNFTs *NarratorNFTsCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _NarratorNFTs.Contract.SupportsInterface(&_NarratorNFTs.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NarratorNFTs *NarratorNFTsCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NarratorNFTs *NarratorNFTsSession) Symbol() (string, error) {
	return _NarratorNFTs.Contract.Symbol(&_NarratorNFTs.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NarratorNFTs *NarratorNFTsCallerSession) Symbol() (string, error) {
	return _NarratorNFTs.Contract.Symbol(&_NarratorNFTs.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _NarratorNFTs.Contract.TokenByIndex(&_NarratorNFTs.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _NarratorNFTs.Contract.TokenByIndex(&_NarratorNFTs.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _NarratorNFTs.Contract.TokenOfOwnerByIndex(&_NarratorNFTs.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NarratorNFTs *NarratorNFTsCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _NarratorNFTs.Contract.TokenOfOwnerByIndex(&_NarratorNFTs.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 id) view returns(string)
func (_NarratorNFTs *NarratorNFTsCaller) TokenURI(opts *bind.CallOpts, id *big.Int) (string, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "tokenURI", id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 id) view returns(string)
func (_NarratorNFTs *NarratorNFTsSession) TokenURI(id *big.Int) (string, error) {
	return _NarratorNFTs.Contract.TokenURI(&_NarratorNFTs.CallOpts, id)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 id) view returns(string)
func (_NarratorNFTs *NarratorNFTsCallerSession) TokenURI(id *big.Int) (string, error) {
	return _NarratorNFTs.Contract.TokenURI(&_NarratorNFTs.CallOpts, id)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NarratorNFTs *NarratorNFTsCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NarratorNFTs.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NarratorNFTs *NarratorNFTsSession) TotalSupply() (*big.Int, error) {
	return _NarratorNFTs.Contract.TotalSupply(&_NarratorNFTs.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NarratorNFTs *NarratorNFTsCallerSession) TotalSupply() (*big.Int, error) {
	return _NarratorNFTs.Contract.TotalSupply(&_NarratorNFTs.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.Approve(&_NarratorNFTs.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.Approve(&_NarratorNFTs.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string URI) returns()
func (_NarratorNFTs *NarratorNFTsTransactor) Mint(opts *bind.TransactOpts, to common.Address, URI string) (*types.Transaction, error) {
	return _NarratorNFTs.contract.Transact(opts, "mint", to, URI)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string URI) returns()
func (_NarratorNFTs *NarratorNFTsSession) Mint(to common.Address, URI string) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.Mint(&_NarratorNFTs.TransactOpts, to, URI)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string URI) returns()
func (_NarratorNFTs *NarratorNFTsTransactorSession) Mint(to common.Address, URI string) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.Mint(&_NarratorNFTs.TransactOpts, to, URI)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.SafeTransferFrom(&_NarratorNFTs.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.SafeTransferFrom(&_NarratorNFTs.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NarratorNFTs *NarratorNFTsTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NarratorNFTs.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NarratorNFTs *NarratorNFTsSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.SafeTransferFrom0(&_NarratorNFTs.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NarratorNFTs *NarratorNFTsTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.SafeTransferFrom0(&_NarratorNFTs.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NarratorNFTs *NarratorNFTsTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _NarratorNFTs.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NarratorNFTs *NarratorNFTsSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.SetApprovalForAll(&_NarratorNFTs.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NarratorNFTs *NarratorNFTsTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.SetApprovalForAll(&_NarratorNFTs.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.TransferFrom(&_NarratorNFTs.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NarratorNFTs *NarratorNFTsTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NarratorNFTs.Contract.TransferFrom(&_NarratorNFTs.TransactOpts, from, to, tokenId)
}

// NarratorNFTsApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the NarratorNFTs contract.
type NarratorNFTsApprovalIterator struct {
	Event *NarratorNFTsApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NarratorNFTsApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NarratorNFTsApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NarratorNFTsApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NarratorNFTsApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NarratorNFTsApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NarratorNFTsApproval represents a Approval event raised by the NarratorNFTs contract.
type NarratorNFTsApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NarratorNFTs *NarratorNFTsFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*NarratorNFTsApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NarratorNFTs.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NarratorNFTsApprovalIterator{contract: _NarratorNFTs.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NarratorNFTs *NarratorNFTsFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *NarratorNFTsApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NarratorNFTs.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NarratorNFTsApproval)
				if err := _NarratorNFTs.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NarratorNFTs *NarratorNFTsFilterer) ParseApproval(log types.Log) (*NarratorNFTsApproval, error) {
	event := new(NarratorNFTsApproval)
	if err := _NarratorNFTs.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NarratorNFTsApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the NarratorNFTs contract.
type NarratorNFTsApprovalForAllIterator struct {
	Event *NarratorNFTsApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NarratorNFTsApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NarratorNFTsApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NarratorNFTsApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NarratorNFTsApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NarratorNFTsApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NarratorNFTsApprovalForAll represents a ApprovalForAll event raised by the NarratorNFTs contract.
type NarratorNFTsApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NarratorNFTs *NarratorNFTsFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*NarratorNFTsApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _NarratorNFTs.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &NarratorNFTsApprovalForAllIterator{contract: _NarratorNFTs.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NarratorNFTs *NarratorNFTsFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *NarratorNFTsApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _NarratorNFTs.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NarratorNFTsApprovalForAll)
				if err := _NarratorNFTs.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NarratorNFTs *NarratorNFTsFilterer) ParseApprovalForAll(log types.Log) (*NarratorNFTsApprovalForAll, error) {
	event := new(NarratorNFTsApprovalForAll)
	if err := _NarratorNFTs.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NarratorNFTsTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the NarratorNFTs contract.
type NarratorNFTsTransferIterator struct {
	Event *NarratorNFTsTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NarratorNFTsTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NarratorNFTsTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NarratorNFTsTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NarratorNFTsTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NarratorNFTsTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NarratorNFTsTransfer represents a Transfer event raised by the NarratorNFTs contract.
type NarratorNFTsTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NarratorNFTs *NarratorNFTsFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*NarratorNFTsTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NarratorNFTs.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NarratorNFTsTransferIterator{contract: _NarratorNFTs.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NarratorNFTs *NarratorNFTsFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *NarratorNFTsTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NarratorNFTs.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NarratorNFTsTransfer)
				if err := _NarratorNFTs.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NarratorNFTs *NarratorNFTsFilterer) ParseTransfer(log types.Log) (*NarratorNFTsTransfer, error) {
	event := new(NarratorNFTsTransfer)
	if err := _NarratorNFTs.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
