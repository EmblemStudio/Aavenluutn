// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package publisher

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PublisherAuction is an auto generated low-level Go binding around an user-defined struct.
type PublisherAuction struct {
	Amount   *big.Int
	Bidder   common.Address
	Duration *big.Int
}

// PublisherNarrator is an auto generated low-level Go binding around an user-defined struct.
type PublisherNarrator struct {
	NFTAddress        common.Address
	NFTId             *big.Int
	Start             *big.Int
	TotalCollections  *big.Int
	CollectionLength  *big.Int
	CollectionSpacing *big.Int
	CollectionSize    *big.Int
}

// PublisherMetaData contains all meta data concerning the Publisher contract.
var PublisherMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAuctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"narratorIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"storyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"narratorIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"storyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSpacing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structPublisher.Narrator\",\"name\":\"narrator\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"NarratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSpacing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"}],\"name\":\"addNarrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAuctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"narratorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storyIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintTo\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"narratorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storyIndex\",\"type\":\"uint256\"}],\"name\":\"getStoryId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"narratorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storyIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedStories\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"narratorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"narrators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"NFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSpacing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"narratorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"structPublisher.Auction\",\"name\":\"auction\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"narratorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storyIndex\",\"type\":\"uint256\"}],\"name\":\"storyStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// PublisherABI is the input ABI used to generate the binding from.
// Deprecated: Use PublisherMetaData.ABI instead.
var PublisherABI = PublisherMetaData.ABI

// PublisherBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PublisherMetaData.Bin instead.
var PublisherBin = PublisherMetaData.Bin

// DeployPublisher deploys a new Ethereum contract, binding an instance of Publisher to it.
func DeployPublisher(auth *bind.TransactOpts, backend bind.ContractBackend, _baseAuctionDuration *big.Int, _timeBuffer *big.Int, _minBidAmount *big.Int, _minBidIncrementPercentage uint8, name string, symbol string) (common.Address, *types.Transaction, *Publisher, error) {
	parsed, err := PublisherMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PublisherBin), backend, _baseAuctionDuration, _timeBuffer, _minBidAmount, _minBidIncrementPercentage, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Publisher{PublisherCaller: PublisherCaller{contract: contract}, PublisherTransactor: PublisherTransactor{contract: contract}, PublisherFilterer: PublisherFilterer{contract: contract}}, nil
}

// Publisher is an auto generated Go binding around an Ethereum contract.
type Publisher struct {
	PublisherCaller     // Read-only binding to the contract
	PublisherTransactor // Write-only binding to the contract
	PublisherFilterer   // Log filterer for contract events
}

// PublisherCaller is an auto generated read-only Go binding around an Ethereum contract.
type PublisherCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublisherTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PublisherTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublisherFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PublisherFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublisherSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PublisherSession struct {
	Contract     *Publisher        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PublisherCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PublisherCallerSession struct {
	Contract *PublisherCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// PublisherTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PublisherTransactorSession struct {
	Contract     *PublisherTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// PublisherRaw is an auto generated low-level Go binding around an Ethereum contract.
type PublisherRaw struct {
	Contract *Publisher // Generic contract binding to access the raw methods on
}

// PublisherCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PublisherCallerRaw struct {
	Contract *PublisherCaller // Generic read-only contract binding to access the raw methods on
}

// PublisherTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PublisherTransactorRaw struct {
	Contract *PublisherTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPublisher creates a new instance of Publisher, bound to a specific deployed contract.
func NewPublisher(address common.Address, backend bind.ContractBackend) (*Publisher, error) {
	contract, err := bindPublisher(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Publisher{PublisherCaller: PublisherCaller{contract: contract}, PublisherTransactor: PublisherTransactor{contract: contract}, PublisherFilterer: PublisherFilterer{contract: contract}}, nil
}

// NewPublisherCaller creates a new read-only instance of Publisher, bound to a specific deployed contract.
func NewPublisherCaller(address common.Address, caller bind.ContractCaller) (*PublisherCaller, error) {
	contract, err := bindPublisher(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PublisherCaller{contract: contract}, nil
}

// NewPublisherTransactor creates a new write-only instance of Publisher, bound to a specific deployed contract.
func NewPublisherTransactor(address common.Address, transactor bind.ContractTransactor) (*PublisherTransactor, error) {
	contract, err := bindPublisher(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PublisherTransactor{contract: contract}, nil
}

// NewPublisherFilterer creates a new log filterer instance of Publisher, bound to a specific deployed contract.
func NewPublisherFilterer(address common.Address, filterer bind.ContractFilterer) (*PublisherFilterer, error) {
	contract, err := bindPublisher(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PublisherFilterer{contract: contract}, nil
}

// bindPublisher binds a generic wrapper to an already deployed contract.
func bindPublisher(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PublisherABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Publisher *PublisherRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Publisher.Contract.PublisherCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Publisher *PublisherRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Publisher.Contract.PublisherTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Publisher *PublisherRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Publisher.Contract.PublisherTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Publisher *PublisherCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Publisher.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Publisher *PublisherTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Publisher.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Publisher *PublisherTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Publisher.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Publisher *PublisherCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Publisher *PublisherSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Publisher.Contract.BalanceOf(&_Publisher.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Publisher *PublisherCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Publisher.Contract.BalanceOf(&_Publisher.CallOpts, owner)
}

// BaseAuctionDuration is a free data retrieval call binding the contract method 0x42cdddcb.
//
// Solidity: function baseAuctionDuration() view returns(uint256)
func (_Publisher *PublisherCaller) BaseAuctionDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "baseAuctionDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseAuctionDuration is a free data retrieval call binding the contract method 0x42cdddcb.
//
// Solidity: function baseAuctionDuration() view returns(uint256)
func (_Publisher *PublisherSession) BaseAuctionDuration() (*big.Int, error) {
	return _Publisher.Contract.BaseAuctionDuration(&_Publisher.CallOpts)
}

// BaseAuctionDuration is a free data retrieval call binding the contract method 0x42cdddcb.
//
// Solidity: function baseAuctionDuration() view returns(uint256)
func (_Publisher *PublisherCallerSession) BaseAuctionDuration() (*big.Int, error) {
	return _Publisher.Contract.BaseAuctionDuration(&_Publisher.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Publisher *PublisherCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Publisher *PublisherSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Publisher.Contract.GetApproved(&_Publisher.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Publisher *PublisherCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Publisher.Contract.GetApproved(&_Publisher.CallOpts, tokenId)
}

// GetStoryId is a free data retrieval call binding the contract method 0x29f6b136.
//
// Solidity: function getStoryId(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex) pure returns(bytes32)
func (_Publisher *PublisherCaller) GetStoryId(opts *bind.CallOpts, narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "getStoryId", narratorIndex, collectionIndex, storyIndex)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetStoryId is a free data retrieval call binding the contract method 0x29f6b136.
//
// Solidity: function getStoryId(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex) pure returns(bytes32)
func (_Publisher *PublisherSession) GetStoryId(narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int) ([32]byte, error) {
	return _Publisher.Contract.GetStoryId(&_Publisher.CallOpts, narratorIndex, collectionIndex, storyIndex)
}

// GetStoryId is a free data retrieval call binding the contract method 0x29f6b136.
//
// Solidity: function getStoryId(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex) pure returns(bytes32)
func (_Publisher *PublisherCallerSession) GetStoryId(narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int) ([32]byte, error) {
	return _Publisher.Contract.GetStoryId(&_Publisher.CallOpts, narratorIndex, collectionIndex, storyIndex)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Publisher *PublisherCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Publisher *PublisherSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Publisher.Contract.IsApprovedForAll(&_Publisher.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Publisher *PublisherCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Publisher.Contract.IsApprovedForAll(&_Publisher.CallOpts, owner, operator)
}

// MinBidIncrementPercentage is a free data retrieval call binding the contract method 0xb296024d.
//
// Solidity: function minBidIncrementPercentage() view returns(uint8)
func (_Publisher *PublisherCaller) MinBidIncrementPercentage(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "minBidIncrementPercentage")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MinBidIncrementPercentage is a free data retrieval call binding the contract method 0xb296024d.
//
// Solidity: function minBidIncrementPercentage() view returns(uint8)
func (_Publisher *PublisherSession) MinBidIncrementPercentage() (uint8, error) {
	return _Publisher.Contract.MinBidIncrementPercentage(&_Publisher.CallOpts)
}

// MinBidIncrementPercentage is a free data retrieval call binding the contract method 0xb296024d.
//
// Solidity: function minBidIncrementPercentage() view returns(uint8)
func (_Publisher *PublisherCallerSession) MinBidIncrementPercentage() (uint8, error) {
	return _Publisher.Contract.MinBidIncrementPercentage(&_Publisher.CallOpts)
}

// MintedStories is a free data retrieval call binding the contract method 0x56d1d4e4.
//
// Solidity: function mintedStories(uint256 ) view returns(bytes32)
func (_Publisher *PublisherCaller) MintedStories(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "mintedStories", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MintedStories is a free data retrieval call binding the contract method 0x56d1d4e4.
//
// Solidity: function mintedStories(uint256 ) view returns(bytes32)
func (_Publisher *PublisherSession) MintedStories(arg0 *big.Int) ([32]byte, error) {
	return _Publisher.Contract.MintedStories(&_Publisher.CallOpts, arg0)
}

// MintedStories is a free data retrieval call binding the contract method 0x56d1d4e4.
//
// Solidity: function mintedStories(uint256 ) view returns(bytes32)
func (_Publisher *PublisherCallerSession) MintedStories(arg0 *big.Int) ([32]byte, error) {
	return _Publisher.Contract.MintedStories(&_Publisher.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Publisher *PublisherCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Publisher *PublisherSession) Name() (string, error) {
	return _Publisher.Contract.Name(&_Publisher.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Publisher *PublisherCallerSession) Name() (string, error) {
	return _Publisher.Contract.Name(&_Publisher.CallOpts)
}

// NarratorCount is a free data retrieval call binding the contract method 0x046d9dbb.
//
// Solidity: function narratorCount() view returns(uint256 _value)
func (_Publisher *PublisherCaller) NarratorCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "narratorCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NarratorCount is a free data retrieval call binding the contract method 0x046d9dbb.
//
// Solidity: function narratorCount() view returns(uint256 _value)
func (_Publisher *PublisherSession) NarratorCount() (*big.Int, error) {
	return _Publisher.Contract.NarratorCount(&_Publisher.CallOpts)
}

// NarratorCount is a free data retrieval call binding the contract method 0x046d9dbb.
//
// Solidity: function narratorCount() view returns(uint256 _value)
func (_Publisher *PublisherCallerSession) NarratorCount() (*big.Int, error) {
	return _Publisher.Contract.NarratorCount(&_Publisher.CallOpts)
}

// Narrators is a free data retrieval call binding the contract method 0x861ba9df.
//
// Solidity: function narrators(uint256 ) view returns(address NFTAddress, uint256 NFTId, uint256 start, uint256 totalCollections, uint256 collectionLength, uint256 collectionSpacing, uint256 collectionSize)
func (_Publisher *PublisherCaller) Narrators(opts *bind.CallOpts, arg0 *big.Int) (struct {
	NFTAddress        common.Address
	NFTId             *big.Int
	Start             *big.Int
	TotalCollections  *big.Int
	CollectionLength  *big.Int
	CollectionSpacing *big.Int
	CollectionSize    *big.Int
}, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "narrators", arg0)

	outstruct := new(struct {
		NFTAddress        common.Address
		NFTId             *big.Int
		Start             *big.Int
		TotalCollections  *big.Int
		CollectionLength  *big.Int
		CollectionSpacing *big.Int
		CollectionSize    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NFTAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.NFTId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Start = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.TotalCollections = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.CollectionLength = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.CollectionSpacing = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.CollectionSize = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Narrators is a free data retrieval call binding the contract method 0x861ba9df.
//
// Solidity: function narrators(uint256 ) view returns(address NFTAddress, uint256 NFTId, uint256 start, uint256 totalCollections, uint256 collectionLength, uint256 collectionSpacing, uint256 collectionSize)
func (_Publisher *PublisherSession) Narrators(arg0 *big.Int) (struct {
	NFTAddress        common.Address
	NFTId             *big.Int
	Start             *big.Int
	TotalCollections  *big.Int
	CollectionLength  *big.Int
	CollectionSpacing *big.Int
	CollectionSize    *big.Int
}, error) {
	return _Publisher.Contract.Narrators(&_Publisher.CallOpts, arg0)
}

// Narrators is a free data retrieval call binding the contract method 0x861ba9df.
//
// Solidity: function narrators(uint256 ) view returns(address NFTAddress, uint256 NFTId, uint256 start, uint256 totalCollections, uint256 collectionLength, uint256 collectionSpacing, uint256 collectionSize)
func (_Publisher *PublisherCallerSession) Narrators(arg0 *big.Int) (struct {
	NFTAddress        common.Address
	NFTId             *big.Int
	Start             *big.Int
	TotalCollections  *big.Int
	CollectionLength  *big.Int
	CollectionSpacing *big.Int
	CollectionSize    *big.Int
}, error) {
	return _Publisher.Contract.Narrators(&_Publisher.CallOpts, arg0)
}

// NftIds is a free data retrieval call binding the contract method 0xddfe867f.
//
// Solidity: function nftIds() view returns(uint256 _value)
func (_Publisher *PublisherCaller) NftIds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "nftIds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NftIds is a free data retrieval call binding the contract method 0xddfe867f.
//
// Solidity: function nftIds() view returns(uint256 _value)
func (_Publisher *PublisherSession) NftIds() (*big.Int, error) {
	return _Publisher.Contract.NftIds(&_Publisher.CallOpts)
}

// NftIds is a free data retrieval call binding the contract method 0xddfe867f.
//
// Solidity: function nftIds() view returns(uint256 _value)
func (_Publisher *PublisherCallerSession) NftIds() (*big.Int, error) {
	return _Publisher.Contract.NftIds(&_Publisher.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Publisher *PublisherCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Publisher *PublisherSession) Owner() (common.Address, error) {
	return _Publisher.Contract.Owner(&_Publisher.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Publisher *PublisherCallerSession) Owner() (common.Address, error) {
	return _Publisher.Contract.Owner(&_Publisher.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Publisher *PublisherCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Publisher *PublisherSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Publisher.Contract.OwnerOf(&_Publisher.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Publisher *PublisherCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Publisher.Contract.OwnerOf(&_Publisher.CallOpts, tokenId)
}

// Stories is a free data retrieval call binding the contract method 0x8e3ce9b9.
//
// Solidity: function stories(bytes32 ) view returns(uint256 narratorIndex, uint256 collectionIndex, uint256 index, (uint256,address,uint256) auction, bool minted, uint256 nftId)
func (_Publisher *PublisherCaller) Stories(opts *bind.CallOpts, arg0 [32]byte) (struct {
	NarratorIndex   *big.Int
	CollectionIndex *big.Int
	Index           *big.Int
	Auction         PublisherAuction
	Minted          bool
	NftId           *big.Int
}, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "stories", arg0)

	outstruct := new(struct {
		NarratorIndex   *big.Int
		CollectionIndex *big.Int
		Index           *big.Int
		Auction         PublisherAuction
		Minted          bool
		NftId           *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NarratorIndex = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.CollectionIndex = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Auction = *abi.ConvertType(out[3], new(PublisherAuction)).(*PublisherAuction)
	outstruct.Minted = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.NftId = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Stories is a free data retrieval call binding the contract method 0x8e3ce9b9.
//
// Solidity: function stories(bytes32 ) view returns(uint256 narratorIndex, uint256 collectionIndex, uint256 index, (uint256,address,uint256) auction, bool minted, uint256 nftId)
func (_Publisher *PublisherSession) Stories(arg0 [32]byte) (struct {
	NarratorIndex   *big.Int
	CollectionIndex *big.Int
	Index           *big.Int
	Auction         PublisherAuction
	Minted          bool
	NftId           *big.Int
}, error) {
	return _Publisher.Contract.Stories(&_Publisher.CallOpts, arg0)
}

// Stories is a free data retrieval call binding the contract method 0x8e3ce9b9.
//
// Solidity: function stories(bytes32 ) view returns(uint256 narratorIndex, uint256 collectionIndex, uint256 index, (uint256,address,uint256) auction, bool minted, uint256 nftId)
func (_Publisher *PublisherCallerSession) Stories(arg0 [32]byte) (struct {
	NarratorIndex   *big.Int
	CollectionIndex *big.Int
	Index           *big.Int
	Auction         PublisherAuction
	Minted          bool
	NftId           *big.Int
}, error) {
	return _Publisher.Contract.Stories(&_Publisher.CallOpts, arg0)
}

// StoryStartTime is a free data retrieval call binding the contract method 0xc5e63c50.
//
// Solidity: function storyStartTime(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex) view returns(uint256)
func (_Publisher *PublisherCaller) StoryStartTime(opts *bind.CallOpts, narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "storyStartTime", narratorIndex, collectionIndex, storyIndex)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StoryStartTime is a free data retrieval call binding the contract method 0xc5e63c50.
//
// Solidity: function storyStartTime(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex) view returns(uint256)
func (_Publisher *PublisherSession) StoryStartTime(narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int) (*big.Int, error) {
	return _Publisher.Contract.StoryStartTime(&_Publisher.CallOpts, narratorIndex, collectionIndex, storyIndex)
}

// StoryStartTime is a free data retrieval call binding the contract method 0xc5e63c50.
//
// Solidity: function storyStartTime(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex) view returns(uint256)
func (_Publisher *PublisherCallerSession) StoryStartTime(narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int) (*big.Int, error) {
	return _Publisher.Contract.StoryStartTime(&_Publisher.CallOpts, narratorIndex, collectionIndex, storyIndex)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Publisher *PublisherCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Publisher *PublisherSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Publisher.Contract.SupportsInterface(&_Publisher.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Publisher *PublisherCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Publisher.Contract.SupportsInterface(&_Publisher.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Publisher *PublisherCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Publisher *PublisherSession) Symbol() (string, error) {
	return _Publisher.Contract.Symbol(&_Publisher.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Publisher *PublisherCallerSession) Symbol() (string, error) {
	return _Publisher.Contract.Symbol(&_Publisher.CallOpts)
}

// TimeBuffer is a free data retrieval call binding the contract method 0xec91f2a4.
//
// Solidity: function timeBuffer() view returns(uint256)
func (_Publisher *PublisherCaller) TimeBuffer(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "timeBuffer")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TimeBuffer is a free data retrieval call binding the contract method 0xec91f2a4.
//
// Solidity: function timeBuffer() view returns(uint256)
func (_Publisher *PublisherSession) TimeBuffer() (*big.Int, error) {
	return _Publisher.Contract.TimeBuffer(&_Publisher.CallOpts)
}

// TimeBuffer is a free data retrieval call binding the contract method 0xec91f2a4.
//
// Solidity: function timeBuffer() view returns(uint256)
func (_Publisher *PublisherCallerSession) TimeBuffer() (*big.Int, error) {
	return _Publisher.Contract.TimeBuffer(&_Publisher.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Publisher *PublisherCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Publisher *PublisherSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Publisher.Contract.TokenByIndex(&_Publisher.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Publisher *PublisherCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Publisher.Contract.TokenByIndex(&_Publisher.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Publisher *PublisherCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Publisher *PublisherSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Publisher.Contract.TokenOfOwnerByIndex(&_Publisher.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Publisher *PublisherCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Publisher.Contract.TokenOfOwnerByIndex(&_Publisher.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 nftId) view returns(string)
func (_Publisher *PublisherCaller) TokenURI(opts *bind.CallOpts, nftId *big.Int) (string, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "tokenURI", nftId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 nftId) view returns(string)
func (_Publisher *PublisherSession) TokenURI(nftId *big.Int) (string, error) {
	return _Publisher.Contract.TokenURI(&_Publisher.CallOpts, nftId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 nftId) view returns(string)
func (_Publisher *PublisherCallerSession) TokenURI(nftId *big.Int) (string, error) {
	return _Publisher.Contract.TokenURI(&_Publisher.CallOpts, nftId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Publisher *PublisherCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Publisher.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Publisher *PublisherSession) TotalSupply() (*big.Int, error) {
	return _Publisher.Contract.TotalSupply(&_Publisher.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Publisher *PublisherCallerSession) TotalSupply() (*big.Int, error) {
	return _Publisher.Contract.TotalSupply(&_Publisher.CallOpts)
}

// AddNarrator is a paid mutator transaction binding the contract method 0x9ec289a7.
//
// Solidity: function addNarrator(address NFTAddress, uint256 NFTId, uint256 start, uint256 totalCollections, uint256 collectionLength, uint256 collectionSpacing, uint256 collectionSize) returns()
func (_Publisher *PublisherTransactor) AddNarrator(opts *bind.TransactOpts, NFTAddress common.Address, NFTId *big.Int, start *big.Int, totalCollections *big.Int, collectionLength *big.Int, collectionSpacing *big.Int, collectionSize *big.Int) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "addNarrator", NFTAddress, NFTId, start, totalCollections, collectionLength, collectionSpacing, collectionSize)
}

// AddNarrator is a paid mutator transaction binding the contract method 0x9ec289a7.
//
// Solidity: function addNarrator(address NFTAddress, uint256 NFTId, uint256 start, uint256 totalCollections, uint256 collectionLength, uint256 collectionSpacing, uint256 collectionSize) returns()
func (_Publisher *PublisherSession) AddNarrator(NFTAddress common.Address, NFTId *big.Int, start *big.Int, totalCollections *big.Int, collectionLength *big.Int, collectionSpacing *big.Int, collectionSize *big.Int) (*types.Transaction, error) {
	return _Publisher.Contract.AddNarrator(&_Publisher.TransactOpts, NFTAddress, NFTId, start, totalCollections, collectionLength, collectionSpacing, collectionSize)
}

// AddNarrator is a paid mutator transaction binding the contract method 0x9ec289a7.
//
// Solidity: function addNarrator(address NFTAddress, uint256 NFTId, uint256 start, uint256 totalCollections, uint256 collectionLength, uint256 collectionSpacing, uint256 collectionSize) returns()
func (_Publisher *PublisherTransactorSession) AddNarrator(NFTAddress common.Address, NFTId *big.Int, start *big.Int, totalCollections *big.Int, collectionLength *big.Int, collectionSpacing *big.Int, collectionSize *big.Int) (*types.Transaction, error) {
	return _Publisher.Contract.AddNarrator(&_Publisher.TransactOpts, NFTAddress, NFTId, start, totalCollections, collectionLength, collectionSpacing, collectionSize)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Publisher *PublisherTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Publisher *PublisherSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.Contract.Approve(&_Publisher.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Publisher *PublisherTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.Contract.Approve(&_Publisher.TransactOpts, to, tokenId)
}

// Bid is a paid mutator transaction binding the contract method 0x6da79a93.
//
// Solidity: function bid(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex, address mintTo) payable returns(bool)
func (_Publisher *PublisherTransactor) Bid(opts *bind.TransactOpts, narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int, mintTo common.Address) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "bid", narratorIndex, collectionIndex, storyIndex, mintTo)
}

// Bid is a paid mutator transaction binding the contract method 0x6da79a93.
//
// Solidity: function bid(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex, address mintTo) payable returns(bool)
func (_Publisher *PublisherSession) Bid(narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int, mintTo common.Address) (*types.Transaction, error) {
	return _Publisher.Contract.Bid(&_Publisher.TransactOpts, narratorIndex, collectionIndex, storyIndex, mintTo)
}

// Bid is a paid mutator transaction binding the contract method 0x6da79a93.
//
// Solidity: function bid(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex, address mintTo) payable returns(bool)
func (_Publisher *PublisherTransactorSession) Bid(narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int, mintTo common.Address) (*types.Transaction, error) {
	return _Publisher.Contract.Bid(&_Publisher.TransactOpts, narratorIndex, collectionIndex, storyIndex, mintTo)
}

// Mint is a paid mutator transaction binding the contract method 0x643183bf.
//
// Solidity: function mint(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex, address to) returns()
func (_Publisher *PublisherTransactor) Mint(opts *bind.TransactOpts, narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int, to common.Address) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "mint", narratorIndex, collectionIndex, storyIndex, to)
}

// Mint is a paid mutator transaction binding the contract method 0x643183bf.
//
// Solidity: function mint(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex, address to) returns()
func (_Publisher *PublisherSession) Mint(narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int, to common.Address) (*types.Transaction, error) {
	return _Publisher.Contract.Mint(&_Publisher.TransactOpts, narratorIndex, collectionIndex, storyIndex, to)
}

// Mint is a paid mutator transaction binding the contract method 0x643183bf.
//
// Solidity: function mint(uint256 narratorIndex, uint256 collectionIndex, uint256 storyIndex, address to) returns()
func (_Publisher *PublisherTransactorSession) Mint(narratorIndex *big.Int, collectionIndex *big.Int, storyIndex *big.Int, to common.Address) (*types.Transaction, error) {
	return _Publisher.Contract.Mint(&_Publisher.TransactOpts, narratorIndex, collectionIndex, storyIndex, to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Publisher *PublisherTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Publisher *PublisherSession) RenounceOwnership() (*types.Transaction, error) {
	return _Publisher.Contract.RenounceOwnership(&_Publisher.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Publisher *PublisherTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Publisher.Contract.RenounceOwnership(&_Publisher.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Publisher *PublisherTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Publisher *PublisherSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.Contract.SafeTransferFrom(&_Publisher.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Publisher *PublisherTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.Contract.SafeTransferFrom(&_Publisher.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Publisher *PublisherTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Publisher *PublisherSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Publisher.Contract.SafeTransferFrom0(&_Publisher.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Publisher *PublisherTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Publisher.Contract.SafeTransferFrom0(&_Publisher.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Publisher *PublisherTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Publisher *PublisherSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Publisher.Contract.SetApprovalForAll(&_Publisher.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Publisher *PublisherTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Publisher.Contract.SetApprovalForAll(&_Publisher.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Publisher *PublisherTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Publisher *PublisherSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.Contract.TransferFrom(&_Publisher.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Publisher *PublisherTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Publisher.Contract.TransferFrom(&_Publisher.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Publisher *PublisherTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Publisher.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Publisher *PublisherSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Publisher.Contract.TransferOwnership(&_Publisher.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Publisher *PublisherTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Publisher.Contract.TransferOwnership(&_Publisher.TransactOpts, newOwner)
}

// PublisherApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Publisher contract.
type PublisherApprovalIterator struct {
	Event *PublisherApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublisherApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublisherApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublisherApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublisherApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublisherApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublisherApproval represents a Approval event raised by the Publisher contract.
type PublisherApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Publisher *PublisherFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*PublisherApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Publisher.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &PublisherApprovalIterator{contract: _Publisher.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Publisher *PublisherFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PublisherApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Publisher.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublisherApproval)
				if err := _Publisher.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Publisher *PublisherFilterer) ParseApproval(log types.Log) (*PublisherApproval, error) {
	event := new(PublisherApproval)
	if err := _Publisher.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublisherApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Publisher contract.
type PublisherApprovalForAllIterator struct {
	Event *PublisherApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublisherApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublisherApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublisherApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublisherApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublisherApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublisherApprovalForAll represents a ApprovalForAll event raised by the Publisher contract.
type PublisherApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Publisher *PublisherFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*PublisherApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Publisher.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PublisherApprovalForAllIterator{contract: _Publisher.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Publisher *PublisherFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *PublisherApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Publisher.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublisherApprovalForAll)
				if err := _Publisher.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Publisher *PublisherFilterer) ParseApprovalForAll(log types.Log) (*PublisherApprovalForAll, error) {
	event := new(PublisherApprovalForAll)
	if err := _Publisher.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublisherAuctionExtendedIterator is returned from FilterAuctionExtended and is used to iterate over the raw logs and unpacked data for AuctionExtended events raised by the Publisher contract.
type PublisherAuctionExtendedIterator struct {
	Event *PublisherAuctionExtended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublisherAuctionExtendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublisherAuctionExtended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublisherAuctionExtended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublisherAuctionExtendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublisherAuctionExtendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublisherAuctionExtended represents a AuctionExtended event raised by the Publisher contract.
type PublisherAuctionExtended struct {
	NarratorIndex   *big.Int
	CollectionIndex *big.Int
	StoryIndex      *big.Int
	NewDuration     *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAuctionExtended is a free log retrieval operation binding the contract event 0x447af601fbdeb81dc6022bc2a27f0e91add06fedccd2dfae84661f36ea0e5ae3.
//
// Solidity: event AuctionExtended(uint256 indexed narratorIndex, uint256 indexed collectionIndex, uint256 indexed storyIndex, uint256 newDuration)
func (_Publisher *PublisherFilterer) FilterAuctionExtended(opts *bind.FilterOpts, narratorIndex []*big.Int, collectionIndex []*big.Int, storyIndex []*big.Int) (*PublisherAuctionExtendedIterator, error) {

	var narratorIndexRule []interface{}
	for _, narratorIndexItem := range narratorIndex {
		narratorIndexRule = append(narratorIndexRule, narratorIndexItem)
	}
	var collectionIndexRule []interface{}
	for _, collectionIndexItem := range collectionIndex {
		collectionIndexRule = append(collectionIndexRule, collectionIndexItem)
	}
	var storyIndexRule []interface{}
	for _, storyIndexItem := range storyIndex {
		storyIndexRule = append(storyIndexRule, storyIndexItem)
	}

	logs, sub, err := _Publisher.contract.FilterLogs(opts, "AuctionExtended", narratorIndexRule, collectionIndexRule, storyIndexRule)
	if err != nil {
		return nil, err
	}
	return &PublisherAuctionExtendedIterator{contract: _Publisher.contract, event: "AuctionExtended", logs: logs, sub: sub}, nil
}

// WatchAuctionExtended is a free log subscription operation binding the contract event 0x447af601fbdeb81dc6022bc2a27f0e91add06fedccd2dfae84661f36ea0e5ae3.
//
// Solidity: event AuctionExtended(uint256 indexed narratorIndex, uint256 indexed collectionIndex, uint256 indexed storyIndex, uint256 newDuration)
func (_Publisher *PublisherFilterer) WatchAuctionExtended(opts *bind.WatchOpts, sink chan<- *PublisherAuctionExtended, narratorIndex []*big.Int, collectionIndex []*big.Int, storyIndex []*big.Int) (event.Subscription, error) {

	var narratorIndexRule []interface{}
	for _, narratorIndexItem := range narratorIndex {
		narratorIndexRule = append(narratorIndexRule, narratorIndexItem)
	}
	var collectionIndexRule []interface{}
	for _, collectionIndexItem := range collectionIndex {
		collectionIndexRule = append(collectionIndexRule, collectionIndexItem)
	}
	var storyIndexRule []interface{}
	for _, storyIndexItem := range storyIndex {
		storyIndexRule = append(storyIndexRule, storyIndexItem)
	}

	logs, sub, err := _Publisher.contract.WatchLogs(opts, "AuctionExtended", narratorIndexRule, collectionIndexRule, storyIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublisherAuctionExtended)
				if err := _Publisher.contract.UnpackLog(event, "AuctionExtended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionExtended is a log parse operation binding the contract event 0x447af601fbdeb81dc6022bc2a27f0e91add06fedccd2dfae84661f36ea0e5ae3.
//
// Solidity: event AuctionExtended(uint256 indexed narratorIndex, uint256 indexed collectionIndex, uint256 indexed storyIndex, uint256 newDuration)
func (_Publisher *PublisherFilterer) ParseAuctionExtended(log types.Log) (*PublisherAuctionExtended, error) {
	event := new(PublisherAuctionExtended)
	if err := _Publisher.contract.UnpackLog(event, "AuctionExtended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublisherBidIterator is returned from FilterBid and is used to iterate over the raw logs and unpacked data for Bid events raised by the Publisher contract.
type PublisherBidIterator struct {
	Event *PublisherBid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublisherBidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublisherBid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublisherBid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublisherBidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublisherBidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublisherBid represents a Bid event raised by the Publisher contract.
type PublisherBid struct {
	NarratorIndex   *big.Int
	CollectionIndex *big.Int
	StoryIndex      *big.Int
	Amount          *big.Int
	Bidder          common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBid is a free log retrieval operation binding the contract event 0xa535b54782c44a5802c7aafde1375168a99bf394355e032a7d310fcef2350e31.
//
// Solidity: event Bid(uint256 indexed narratorIndex, uint256 indexed collectionIndex, uint256 indexed storyIndex, uint256 amount, address bidder)
func (_Publisher *PublisherFilterer) FilterBid(opts *bind.FilterOpts, narratorIndex []*big.Int, collectionIndex []*big.Int, storyIndex []*big.Int) (*PublisherBidIterator, error) {

	var narratorIndexRule []interface{}
	for _, narratorIndexItem := range narratorIndex {
		narratorIndexRule = append(narratorIndexRule, narratorIndexItem)
	}
	var collectionIndexRule []interface{}
	for _, collectionIndexItem := range collectionIndex {
		collectionIndexRule = append(collectionIndexRule, collectionIndexItem)
	}
	var storyIndexRule []interface{}
	for _, storyIndexItem := range storyIndex {
		storyIndexRule = append(storyIndexRule, storyIndexItem)
	}

	logs, sub, err := _Publisher.contract.FilterLogs(opts, "Bid", narratorIndexRule, collectionIndexRule, storyIndexRule)
	if err != nil {
		return nil, err
	}
	return &PublisherBidIterator{contract: _Publisher.contract, event: "Bid", logs: logs, sub: sub}, nil
}

// WatchBid is a free log subscription operation binding the contract event 0xa535b54782c44a5802c7aafde1375168a99bf394355e032a7d310fcef2350e31.
//
// Solidity: event Bid(uint256 indexed narratorIndex, uint256 indexed collectionIndex, uint256 indexed storyIndex, uint256 amount, address bidder)
func (_Publisher *PublisherFilterer) WatchBid(opts *bind.WatchOpts, sink chan<- *PublisherBid, narratorIndex []*big.Int, collectionIndex []*big.Int, storyIndex []*big.Int) (event.Subscription, error) {

	var narratorIndexRule []interface{}
	for _, narratorIndexItem := range narratorIndex {
		narratorIndexRule = append(narratorIndexRule, narratorIndexItem)
	}
	var collectionIndexRule []interface{}
	for _, collectionIndexItem := range collectionIndex {
		collectionIndexRule = append(collectionIndexRule, collectionIndexItem)
	}
	var storyIndexRule []interface{}
	for _, storyIndexItem := range storyIndex {
		storyIndexRule = append(storyIndexRule, storyIndexItem)
	}

	logs, sub, err := _Publisher.contract.WatchLogs(opts, "Bid", narratorIndexRule, collectionIndexRule, storyIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublisherBid)
				if err := _Publisher.contract.UnpackLog(event, "Bid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBid is a log parse operation binding the contract event 0xa535b54782c44a5802c7aafde1375168a99bf394355e032a7d310fcef2350e31.
//
// Solidity: event Bid(uint256 indexed narratorIndex, uint256 indexed collectionIndex, uint256 indexed storyIndex, uint256 amount, address bidder)
func (_Publisher *PublisherFilterer) ParseBid(log types.Log) (*PublisherBid, error) {
	event := new(PublisherBid)
	if err := _Publisher.contract.UnpackLog(event, "Bid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublisherNarratorAddedIterator is returned from FilterNarratorAdded and is used to iterate over the raw logs and unpacked data for NarratorAdded events raised by the Publisher contract.
type PublisherNarratorAddedIterator struct {
	Event *PublisherNarratorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublisherNarratorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublisherNarratorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublisherNarratorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublisherNarratorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublisherNarratorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublisherNarratorAdded represents a NarratorAdded event raised by the Publisher contract.
type PublisherNarratorAdded struct {
	Narrator PublisherNarrator
	Count    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNarratorAdded is a free log retrieval operation binding the contract event 0xe8facfbe6731aa82b62a12340ba7ebb7e2f00e306e11128a39e2bc04e9ff002d.
//
// Solidity: event NarratorAdded((address,uint256,uint256,uint256,uint256,uint256,uint256) narrator, uint256 count)
func (_Publisher *PublisherFilterer) FilterNarratorAdded(opts *bind.FilterOpts) (*PublisherNarratorAddedIterator, error) {

	logs, sub, err := _Publisher.contract.FilterLogs(opts, "NarratorAdded")
	if err != nil {
		return nil, err
	}
	return &PublisherNarratorAddedIterator{contract: _Publisher.contract, event: "NarratorAdded", logs: logs, sub: sub}, nil
}

// WatchNarratorAdded is a free log subscription operation binding the contract event 0xe8facfbe6731aa82b62a12340ba7ebb7e2f00e306e11128a39e2bc04e9ff002d.
//
// Solidity: event NarratorAdded((address,uint256,uint256,uint256,uint256,uint256,uint256) narrator, uint256 count)
func (_Publisher *PublisherFilterer) WatchNarratorAdded(opts *bind.WatchOpts, sink chan<- *PublisherNarratorAdded) (event.Subscription, error) {

	logs, sub, err := _Publisher.contract.WatchLogs(opts, "NarratorAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublisherNarratorAdded)
				if err := _Publisher.contract.UnpackLog(event, "NarratorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNarratorAdded is a log parse operation binding the contract event 0xe8facfbe6731aa82b62a12340ba7ebb7e2f00e306e11128a39e2bc04e9ff002d.
//
// Solidity: event NarratorAdded((address,uint256,uint256,uint256,uint256,uint256,uint256) narrator, uint256 count)
func (_Publisher *PublisherFilterer) ParseNarratorAdded(log types.Log) (*PublisherNarratorAdded, error) {
	event := new(PublisherNarratorAdded)
	if err := _Publisher.contract.UnpackLog(event, "NarratorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublisherOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Publisher contract.
type PublisherOwnershipTransferredIterator struct {
	Event *PublisherOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublisherOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublisherOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublisherOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublisherOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublisherOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublisherOwnershipTransferred represents a OwnershipTransferred event raised by the Publisher contract.
type PublisherOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Publisher *PublisherFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PublisherOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Publisher.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PublisherOwnershipTransferredIterator{contract: _Publisher.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Publisher *PublisherFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PublisherOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Publisher.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublisherOwnershipTransferred)
				if err := _Publisher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Publisher *PublisherFilterer) ParseOwnershipTransferred(log types.Log) (*PublisherOwnershipTransferred, error) {
	event := new(PublisherOwnershipTransferred)
	if err := _Publisher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublisherTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Publisher contract.
type PublisherTransferIterator struct {
	Event *PublisherTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublisherTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublisherTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublisherTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublisherTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublisherTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublisherTransfer represents a Transfer event raised by the Publisher contract.
type PublisherTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Publisher *PublisherFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*PublisherTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Publisher.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &PublisherTransferIterator{contract: _Publisher.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Publisher *PublisherFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PublisherTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Publisher.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublisherTransfer)
				if err := _Publisher.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Publisher *PublisherFilterer) ParseTransfer(log types.Log) (*PublisherTransfer, error) {
	event := new(PublisherTransfer)
	if err := _Publisher.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
